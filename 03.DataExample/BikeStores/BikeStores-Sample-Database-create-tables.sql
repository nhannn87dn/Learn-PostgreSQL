
-- create tables
CREATE TABLE categories (
	category_id  INTEGER  GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
	category_name VARCHAR(255) NOT NULL,
	description VARCHAR(500) NULL,
	-- CONSTRAINTs
	CONSTRAINT pk_categories_category_id PRIMARY KEY(category_id),
	CONSTRAINT uq_categories UNIQUE(category_name)
);

CREATE TABLE brands (
	brand_id  INTEGER  GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
	brand_name VARCHAR(255) NOT NULL,
	description VARCHAR(500) NULL,
	-- CONSTRAINTs
	CONSTRAINT pk_categories_brands PRIMARY KEY(brand_id),
	CONSTRAINT uq_brands UNIQUE(brand_name)
);

CREATE TABLE products (
	product_id  INTEGER  GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
	product_name VARCHAR(255) NOT NULL,
	brand_id  INTEGER  NOT NULL,
	category_id  INTEGER  NOT NULL,
	model_year SMALLINT NOT NULL,
	price NUMERIC(18, 2) NOT NULL DEFAULT 0,
	discount NUMERIC(4, 2) NOT NULL DEFAULT 0,
	description TEXT NULL,
	-- CONSTRAINTs
	CONSTRAINT pk_products_product_id PRIMARY KEY(product_id),
	CONSTRAINT fk_products_category_id FOREIGN KEY (category_id) REFERENCES categories (category_id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_products_brand_id FOREIGN KEY (brand_id) REFERENCES brands (brand_id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT uq_products_product_name UNIQUE(product_name),
	CONSTRAINT ck_products_price CHECK(price >= 0),
	CONSTRAINT ck_products_discount CHECK(discount >= 0 AND discount <= 70)
);

CREATE TABLE customers (
	customer_id  INTEGER  GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
	first_name VARCHAR(255) NOT NULL,
	last_name VARCHAR(255) NOT NULL,
	phone VARCHAR(25) NOT NULL,
	email VARCHAR(150) NOT NULL,
	birthday DATE NULL,
	street VARCHAR(255) NOT NULL,
	city VARCHAR(50) NOT NULL,
	state VARCHAR(50) NOT NULL,
	zip_code VARCHAR(5) NULL,
	-- CONSTRAINTs
	CONSTRAINT pk_customers_customer_id PRIMARY KEY(customer_id),
	CONSTRAINT uq_customers_email UNIQUE(email)
);

CREATE TABLE stores (
	store_id  INTEGER  GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
	store_name VARCHAR(255) NOT NULL,
	phone VARCHAR(25) NULL,
	email VARCHAR(255) NULL,
	street VARCHAR(255) NULL,
	city VARCHAR(255) NULL,
	state VARCHAR(50) NULL,
	zip_code VARCHAR(5) NULL,
	-- CONSTRAINTs
	CONSTRAINT pk_stores_store_id PRIMARY KEY(store_id)
);

CREATE TABLE staffs (
	staff_id  INTEGER  GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	email VARCHAR(255) NOT NULL,
	phone VARCHAR(25) NOT NULL,
	active boolean NOT NULL DEFAULT true,
	store_id  INTEGER  NOT NULL,
	manager_id  INTEGER  NULL,
	-- CONSTRAINTs
	CONSTRAINT pk_staffs_staff_id PRIMARY KEY(staff_id),
	CONSTRAINT uq_staffs_email UNIQUE(email),
	CONSTRAINT uq_staffs_phone UNIQUE(phone),
	CONSTRAINT fk_staffs_store_id FOREIGN KEY (store_id) REFERENCES stores (store_id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_staffs_manager_id FOREIGN KEY (manager_id) REFERENCES staffs (staff_id) ON DELETE NO ACTION ON UPDATE NO ACTION
);

CREATE TABLE orders (
	order_id  INTEGER  GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
	customer_id  INTEGER  NOT NULL,
	order_status SMALLINT NOT NULL,
	-- Order status: 1 = Pending; 2 = Processing; 3 = cancel; 4 = Completed
	order_date timestamp without time zone NOT NULL DEFAULT now(),
	required_date timestamp without time zone NULL,
	shipped_date timestamp without time zone NULL,
	store_id  INTEGER  NOT NULL,
	staff_id  INTEGER  NOT NULL,
	order_note VARCHAR(500) NULL,
	shipping_address VARCHAR(500) NULL,
	shipping_city VARCHAR(50) NULL,
	payment_type SMALLINT NOT NULL,
	-- payment type: 1 = COD; 2 = Credit; 3 = ATM; 4 = Cash
	order_amount NUMERIC(18, 2) NOT NULL,

	-- CONSTRAINTs
	CONSTRAINT pk_orders_order_id PRIMARY KEY(order_id),
	CONSTRAINT fk_orders_customer_id FOREIGN KEY (customer_id) REFERENCES customers(customer_id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_orders_store_id FOREIGN KEY (store_id) REFERENCES stores(store_id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_orders_staff_id FOREIGN KEY (staff_id) REFERENCES staffs(staff_id) ON DELETE NO ACTION ON UPDATE NO ACTION,
	CONSTRAINT ck_orders_order_status CHECK(order_status IN (1,2,3,4)),
	CONSTRAINT ck_orders_payment_type CHECK(payment_type IN (1,2,3,4))
);

CREATE TABLE  order_items (
	order_id  INTEGER  NOT NULL,
	item_id  INTEGER  NOT NULL,
	product_id  INTEGER  NOT NULL,
	quantity  INTEGER  NOT NULL,
	price NUMERIC(18, 2) NOT NULL,
	discount NUMERIC(4, 2) NOT NULL DEFAULT 0,
	CONSTRAINT pk_order_items_order_id_item_id PRIMARY KEY (order_id, item_id),
	CONSTRAINT pk_order_items_order_id FOREIGN KEY (order_id) REFERENCES orders (order_id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT pk_order_items_product_id FOREIGN KEY (product_id) REFERENCES products (product_id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT ck_order_items_price CHECK(price >= 0),
	CONSTRAINT ck_order_items_discount CHECK(discount >= 0 AND discount <= 70),
	CONSTRAINT ck_order_items_quantity CHECK(quantity >= 1)
);

CREATE TABLE stocks (
	store_id  INTEGER  NOT NULL,
	product_id  INTEGER  NOT NULL,
	quantity  INTEGER  NULL DEFAULT 0,
	CONSTRAINT pk_stocks_store_id_product_id PRIMARY KEY (store_id, product_id),
	CONSTRAINT fk_stocks_store_id FOREIGN KEY (store_id) REFERENCES stores (store_id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT fk_stocks_product_id FOREIGN KEY (product_id) REFERENCES products (product_id) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT ck_stocks_quantity CHECK(quantity >= 0)
);


CREATE TABLE taxes (
	tax_id  INTEGER  GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
	state VARCHAR (50) NOT NULL UNIQUE,
	state_tax_rate NUMERIC(3, 2),
	avg_local_tax_rate NUMERIC(3, 2),
	combined_rate NUMERIC(3, 2),
	max_local_tax_rate NUMERIC(3, 2),
	updated_at timestamp without time zone NOT NULL DEFAULT now(),
	CONSTRAINT pk_taxes_tax_id PRIMARY KEY(tax_id),
	CONSTRAINT uq_taxes_state UNIQUE(state),
	CONSTRAINT ck_taxes_combined_rate CHECK(combined_rate  =  (state_tax_rate + avg_local_tax_rate))
);

CREATE TABLE targets
(
    target_id  INTEGER  GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1), 
    percentage NUMERIC(4, 2) NOT NULL DEFAULT 0,
	CONSTRAINT pk_targets_target_id PRIMARY KEY(target_id)
);

CREATE TABLE commissions
(
    staff_id   INTEGER , 
    target_id   INTEGER , 
    base_amount NUMERIC(10, 2) NOT NULL DEFAULT 0, 
    commission  NUMERIC(10, 2) NOT NULL DEFAULT 0,
	CONSTRAINT pk_commissions_staff_id PRIMARY KEY(staff_id),
    CONSTRAINT fk_commissions_target_id FOREIGN KEY (target_id) REFERENCES targets(target_id), 
    CONSTRAINT fk_commissions_staff_id FOREIGN KEY (staff_id) REFERENCES staffs(staff_id)
);